
Rameezs-Air:Terraform rameez$ ls
aws_eks.tf	output.tf	provider.tf

Rameezs-Air:Terraform rameez$ terraform init

Initializing the backend...

Initializing provider plugins...
- Using previously-installed hashicorp/aws v3.20.0

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, we recommend adding version constraints in a required_providers block
in your configuration, with the constraint strings suggested below.

* hashicorp/aws: version = "~> 3.20.0"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
Rameezs-Air:Terraform rameez$ terraform plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eks_cluster.aws_eks will be created
  + resource "aws_eks_cluster" "aws_eks" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "my_eks_cluster"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags                  = {
          + "Name" = "my_EKS"
        }
      + version               = (known after apply)

      + kubernetes_network_config {
          + service_ipv4_cidr = (known after apply)
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = [
              + "subnet-08f7bcfdae4991007",
              + "subnet-0a31a06aad34d2150",
              + "subnet-0b65b0ed562599bdb",
              + "subnet-0eb9b300929f21fdd",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # aws_eks_node_group.node will be created
  + resource "aws_eks_node_group" "node" {
      + ami_type        = (known after apply)
      + arn             = (known after apply)
      + capacity_type   = (known after apply)
      + cluster_name    = "my_eks_cluster"
      + disk_size       = (known after apply)
      + id              = (known after apply)
      + instance_types  = (known after apply)
      + node_group_name = "my_node"
      + node_role_arn   = (known after apply)
      + release_version = (known after apply)
      + resources       = (known after apply)
      + status          = (known after apply)
      + subnet_ids      = [
          + "subnet-08f7bcfdae4991007",
          + "subnet-0a31a06aad34d2150",
          + "subnet-0b65b0ed562599bdb",
          + "subnet-0eb9b300929f21fdd",
        ]
      + version         = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }
    }

  # aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role.eks_nodes will be created
  + resource "aws_iam_role" "eks_nodes" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "my_eks-node-group"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "my_eks-node-group"
    }

  # aws_iam_role_policy_attachment.AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster"
    }

  # aws_iam_role_policy_attachment.AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "eks-cluster"
    }

  # aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "my_eks-node-group"
    }

  # aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "my_eks-node-group"
    }

Plan: 9 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

Rameezs-Air:Terraform rameez$ terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eks_cluster.aws_eks will be created
  + resource "aws_eks_cluster" "aws_eks" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "my_eks_cluster"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags                  = {
          + "Name" = "my_EKS"
        }
      + version               = (known after apply)

      + kubernetes_network_config {
          + service_ipv4_cidr = (known after apply)
        }

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = [
              + "subnet-08f7bcfdae4991007",
              + "subnet-0a31a06aad34d2150",
              + "subnet-0b65b0ed562599bdb",
              + "subnet-0eb9b300929f21fdd",
            ]
          + vpc_id                    = (known after apply)
        }
    }

  # aws_eks_node_group.node will be created
  + resource "aws_eks_node_group" "node" {
      + ami_type        = (known after apply)
      + arn             = (known after apply)
      + capacity_type   = (known after apply)
      + cluster_name    = "my_eks_cluster"
      + disk_size       = (known after apply)
      + id              = (known after apply)
      + instance_types  = (known after apply)
      + node_group_name = "my_node"
      + node_role_arn   = (known after apply)
      + release_version = (known after apply)
      + resources       = (known after apply)
      + status          = (known after apply)
      + subnet_ids      = [
          + "subnet-08f7bcfdae4991007",
          + "subnet-0a31a06aad34d2150",
          + "subnet-0b65b0ed562599bdb",
          + "subnet-0eb9b300929f21fdd",
        ]
      + version         = (known after apply)

      + scaling_config {
          + desired_size = 1
          + max_size     = 2
          + min_size     = 1
        }
    }

  # aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role.eks_nodes will be created
  + resource "aws_iam_role" "eks_nodes" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "my_eks-node-group"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "my_eks-node-group"
    }

  # aws_iam_role_policy_attachment.AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster"
    }

  # aws_iam_role_policy_attachment.AmazonEKSServicePolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSServicePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
      + role       = "eks-cluster"
    }

  # aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "my_eks-node-group"
    }

  # aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "my_eks-node-group"
    }

Plan: 9 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_iam_role.eks_nodes: Creating...
aws_iam_role.eks_cluster: Creating...
aws_iam_role.eks_nodes: Creation complete after 1s [id=my_eks-node-group]
aws_iam_role.eks_cluster: Creation complete after 1s [id=eks-cluster]
aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly: Creating...
aws_iam_role_policy_attachment.AmazonEKSServicePolicy: Creating...
aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy: Creating...
aws_iam_role_policy_attachment.AmazonEKSClusterPolicy: Creating...
aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy: Creating...
aws_eks_cluster.aws_eks: Creating...
aws_iam_role_policy_attachment.AmazonEKSClusterPolicy: Creation complete after 1s [id=eks-cluster-20201205100706275200000001]
aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy: Creation complete after 1s [id=my_eks-node-group-20201205100706280600000003]
aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy: Creation complete after 1s [id=my_eks-node-group-20201205100706287800000004]
aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly: Creation complete after 1s [id=my_eks-node-group-20201205100706279100000002]
aws_iam_role_policy_attachment.AmazonEKSServicePolicy: Creation complete after 1s [id=eks-cluster-20201205100706308800000005]
aws_eks_cluster.aws_eks: Still creating... [10s elapsed]
aws_eks_cluster.aws_eks: Still creating... [20s elapsed]
aws_eks_cluster.aws_eks: Still creating... [30s elapsed]
aws_eks_cluster.aws_eks: Still creating... [40s elapsed]
aws_eks_cluster.aws_eks: Still creating... [50s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m0s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m10s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m20s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m30s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m40s elapsed]
aws_eks_cluster.aws_eks: Still creating... [1m50s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m0s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m10s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m20s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m30s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m40s elapsed]
aws_eks_cluster.aws_eks: Still creating... [2m50s elapsed]
aws_eks_cluster.aws_eks: Still creating... [3m0s elapsed]
aws_eks_cluster.aws_eks: Creation complete after 34m58s [id=my_eks_cluster]
aws_eks_node_group.node: Creating...
aws_eks_node_group.node: Still creating... [10s elapsed]
aws_eks_node_group.node: Still creating... [20s elapsed]

aws_eks_node_group.node: Still creating... [30s elapsed]
aws_eks_node_group.node: Still creating... [40s elapsed]
aws_eks_node_group.node: Still creating... [50s elapsed]
aws_eks_node_group.node: Still creating... [1m0s elapsed]
aws_eks_node_group.node: Still creating... [1m11s elapsed]
aws_eks_node_group.node: Still creating... [1m21s elapsed]
aws_eks_node_group.node: Still creating... [1m31s elapsed]
aws_eks_node_group.node: Still creating... [1m41s elapsed]
aws_eks_node_group.node: Still creating... [1m51s elapsed]
aws_eks_node_group.node: Still creating... [2m1s elapsed]
aws_eks_node_group.node: Creation complete after 2m7s [id=my_eks_cluster:my_node]

Apply complete! Resources: 9 added, 0 changed, 0 destroyed.

Outputs:

eks_cluster_certificat_authority = [
  {
    "data" = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01USXdOVEV3TVRRMU5Wb1hEVE13TVRJd016RXdNVFExTlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTFJDCjFSSmdnR0RMMERKdG9GYU05d0ZkR1pNTTlTRkF6Zk9XdkxoYjMxTVlOMkpJZVRHaVR2Uit5dmlUcXcwc1pNTFYKa3FSanRVeUdHY0g2ejFlOFQybzVuSzNKcStPRlZtbktHbVNSaG1vUDA0TUZ0SFpIemFucVBiMlFnenNEYlhuegpySGIxc2QrSC83b094S0Vuck1LMzZuaXpEbkt1Rjk5dHczZmdBN2hxOENGVzlwMnM3cXpSL2VGQkdWbGx4ZzZVClRTaSsvV0o0NWZXRmhzZW5JOFZQYWpxZ1VxaHI1Ukx3dTJLTTZ6SHhzbHpkVGprY3g2M0xtVGFXOFIxQ0g3NmYKUDNiMlA5Z2hPT0lkWGRyR3h6YUMxYWErSUhkejJGSDc2ZDJjRE4wQWUzUklGelFXWUxmTC8ySTFhVmdVY21oUwpRZU1sb3BDdzlIV0lJNGVia2VFQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBZW1CY3BEeEVKSmdSdGprMER0cm5MTEt3RFQKS2ZOYVo1enRnZW9hbDJYV1FXTk9MM240LzJTM1RaN2ZSd3ZNZlZhclFrTmd6VndIUlN0NjBMT1FoemxCWlVxKwpEZTZZTzFvWjJwZHE5RWZ5T3dvTTAycWl4dHFPaDdkR3psOGh0dk1QNjRER1B2NVo4cTk1MlpzVjdNeTZRZDhwCmdUY0FsU3FDZi8ydERlZ1JYcmNvUk9WLzZQMjgvUGFWRE9nS3docWZFTDdhMWZHYXVsWTNPS0dHbExqYmNWTHEKNW9nMDRiem5ZcjhVV1Fta0dvSnRHUFJiZFFEaFJTWnA1bDdwZ3lUUEF6c0F6T2dIOExnY2Yza09hSmhCRWtNTQpkWVJtWVlCWWM2MTJ1MFZrdERSNFRCVGh1cVp6Yy9IdmlEczBkUk5telBIU0lSTEZsUmd2bE1lckFYMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  },
]
eks_cluster_endpoint = https://C76DA55768F1D3ECDCF2C08E2B37BA48.gr7.eu-central-1.eks.amazonaws.com













































Rameezs-Air:Terraform rameez$ curl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/quickstart/cwagent-fluentd-quickstart.yaml | sed "s/{{cluster_name}}/my_eks_cluster/;s/{{region_name}}/eu-central-1/" | kubectl apply -f -
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 15574  100 15574    0     0   345k      0 --:--:-- --:--:-- --:--:--  353k
namespace/amazon-cloudwatch unchanged
serviceaccount/cloudwatch-agent unchanged
clusterrole.rbac.authorization.k8s.io/cloudwatch-agent-role unchanged
clusterrolebinding.rbac.authorization.k8s.io/cloudwatch-agent-role-binding unchanged
configmap/cwagentconfig configured
daemonset.apps/cloudwatch-agent unchanged
configmap/cluster-info created
serviceaccount/fluentd created
clusterrole.rbac.authorization.k8s.io/fluentd-role created
clusterrolebinding.rbac.authorization.k8s.io/fluentd-role-binding created
configmap/fluentd-config created
daemonset.apps/fluentd-cloudwatch created
Rameezs-Air:Terraform rameez$ kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cloudwatch-namespace.yaml
namespace/amazon-cloudwatch unchanged
Rameezs-Air:Terraform rameez$ kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cwagent/cwagent-serviceaccount.yaml
serviceaccount/cloudwatch-agent unchanged
clusterrole.rbac.authorization.k8s.io/cloudwatch-agent-role unchanged
clusterrolebinding.rbac.authorization.k8s.io/cloudwatch-agent-role-binding unchanged
Rameezs-Air:Terraform rameez$ curl -O https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cwagent/cwagent-configmap.yaml
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   521  100   521    0     0   2144      0 --:--:-- --:--:-- --:--:--  2135
Rameezs-Air:Terraform rameez$ kubectl apply -f cwagent-configmap.yaml
configmap/cwagentconfig configured
Rameezs-Air:Terraform rameez$ kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cwagent/cwagent-daemonset.yaml
daemonset.apps/cloudwatch-agent unchanged
Rameezs-Air:Terraform rameez$ curl -O  https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cwagent/cwagent-daemonset.yaml
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2338  100  2338    0     0  10774      0 --:--:-- --:--:-- --:--:-- 10774
Rameezs-Air:Terraform rameez$ kubectl apply -f cwagent-daemonset.yaml
daemonset.apps/cloudwatch-agent unchanged
Rameezs-Air:Terraform rameez$ kubectl get pods -n amazon-cloudwatch
NAME                       READY   STATUS    RESTARTS   AGE
cloudwatch-agent-d69gc     1/1     Running   0          3m8s
fluentd-cloudwatch-f57kw   1/1     Running   0          2m3s
Rameezs-Air:Terraform rameez$ 










